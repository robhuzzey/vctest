{"version":3,"sources":["Components/Beer.js","Components/Header.js","Components/Footer.js","Components/Search.js","Components/CardGrid.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","card","height","display","flexDirection","paddingTop","spacing","cardMedia","backgroundSize","cardContent","flexGrow","Beer","props","classes","name","Card","className","CardMedia","image","imageUrl","title","imageTitle","CardContent","Typography","gutterBottom","variant","component","firstBrewed","description","header","backgroundColor","Header","AppBar","position","Toolbar","color","noWrap","footer","palette","background","paper","padding","Footer","align","children","input","marginLeft","flex","iconButton","searchBar","paddingBottom","root","alignItems","Search","onSearch","placeHolderText","useState","searchTerm","setState","searchCallback","Container","maxWidth","Paper","InputBase","placeholder","inputProps","onChange","event","target","value","onKeyPress","e","key","IconButton","aria-label","onClick","cardGrid","CardGrid","fetchBeers","a","cleanedSearchTerm","replace","fetch","then","data","json","result","App","state","beers","fetching","this","CssBaseline","length","Grid","container","map","beer","item","id","xs","sm","md","image_url","first_brewed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8925f7ff.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    paddingTop: theme.spacing(1)\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n    backgroundSize: 'contain'\n  },\n  cardContent: {\n    flexGrow: 1\n  }\n}))\n\nconst Beer = (props) => {\n  const classes = useStyles()\n  if (!props.name) return null\n  return (\n    <Card className={classes.card}>\n      <CardMedia\n        className={classes.cardMedia}\n        image={props.imageUrl || 'https://via.placeholder.com/120x120.png?text=Missing+image'}\n        title={props.imageTitle || props.name}\n      />\n      <CardContent className={classes.cardContent}>\n        <Typography gutterBottom variant='h5' component='h2'>\n          {props.name}\n        </Typography>\n        {props.firstBrewed && (\n          <Typography variant='caption' display='block' gutterBottom>\n            First brewed: {props.firstBrewed}\n          </Typography>\n        )}\n        {props.description && (\n          <Typography>\n            {props.description}\n          </Typography>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default Beer\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  header: {\n    backgroundColor: '#DC143C'\n  }\n}))\n\nconst Header = (props) => {\n  const classes = useStyles()\n  return (\n    <>\n      <AppBar className={classes.header} position='relative'>\n        <Toolbar>\n          <Typography variant='h6' color='inherit' noWrap>\n            {props.title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}))\n\nconst Footer = (props) => {\n  const classes = useStyles()\n  return (\n    <footer className={classes.footer}>\n      <Typography variant='h6' align='center' gutterBottom>\n        {props.children}\n      </Typography>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputBase from '@material-ui/core/InputBase'\nimport SearchIcon from '@material-ui/icons/Search'\nimport Container from '@material-ui/core/Container'\nimport Paper from '@material-ui/core/Paper'\n\nconst useStyles = makeStyles(theme => ({\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  iconButton: {\n    padding: 10\n  },\n  searchBar: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(1)\n  },\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center'\n  }\n}))\n\nconst Search = (props = {\n  onSearch: () => {},\n  placeHolderText: 'Search'\n}) => {\n  const classes = useStyles()\n  const [searchTerm, setState] = useState('')\n  const searchCallback = () => {\n    props.onSearch(searchTerm)\n    setState('')\n  }\n  return (\n    <Container className={classes.searchBar} maxWidth='md'>\n      <Paper className={classes.root}>\n        <InputBase\n          className={classes.input}\n          placeholder={props.placeHolderText}\n          inputProps={{ 'aria-label': props.placeHolderText }}\n          onChange={event => {\n            setState(event.target.value)\n          }}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              searchCallback()\n            }\n          }}\n          value={searchTerm}\n        />\n        <IconButton\n          className={classes.iconButton}\n          aria-label='search'\n          onClick={searchCallback}\n        >\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n    </Container>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  cardGrid: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(8)\n  }\n}))\n\nconst CardGrid = (props) => {\n  const classes = useStyles()\n  return (\n    <Container className={classes.cardGrid} maxWidth='md'>\n      {props.children}\n    </Container>\n  )\n}\n\nexport default CardGrid\n","import React from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Beer from './Components/Beer'\nimport Header from './Components/Header'\nimport Footer from './Components/Footer'\nimport Search from './Components/Search'\nimport CardGrid from './Components/CardGrid'\n\nconst fetchBeers = async (searchTerm) => {\n  const cleanedSearchTerm = searchTerm.replace(/ /g, '_')\n  const result = await fetch(`https://api.punkapi.com/v2/beers?food=${cleanedSearchTerm}`)\n    .then(data => data.json())\n    .then(json => {\n      return json\n    })\n  return result\n}\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      beers: [],\n      searchTerm: null,\n      fetching: false\n    }\n  }\n\n  async fetchBeers (searchTerm) {\n    this.setState(() => {\n      return {\n        fetching: true,\n        beers: []\n      }\n    })\n    const beers = await fetchBeers(searchTerm)\n    this.setState(() => {\n      return {\n        beers,\n        fetching: false\n      }\n    })\n  }\n\n  render () {\n    return (\n      <>\n        <CssBaseline />\n        <Header\n          title='IPA Brewdog'\n        />\n        <main>\n          <Search\n            placeHolderText='Search for your favourite foods here'\n            onSearch={searchTerm => {\n              this.fetchBeers(searchTerm)\n              this.setState(() => {\n                return {\n                  searchTerm\n                }\n              })\n            }}\n          />\n\n          {this.state.searchTerm && !this.state.fetching && (\n            <CardGrid>\n              {this.state.beers.length === 0 ? (\n                <Typography>{`No results to show for ${this.state.searchTerm}`}</Typography>\n              ) : (\n                <Typography>{`Beers that pair well with: ${this.state.searchTerm}`}</Typography>\n              )}\n            </CardGrid>\n          )}\n\n          {this.state.beers.length > 0 && (\n            <CardGrid>\n              <Grid container spacing={4}>\n                {this.state.beers.map(beer => (\n                  <Grid item key={beer.id} xs={12} sm={6} md={4}>\n                    <Beer\n                      name={beer.name}\n                      imageUrl={beer.image_url}\n                      description={beer.description}\n                      firstBrewed={beer.first_brewed}\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            </CardGrid>\n          )}\n        </main>\n        <Footer>\n          Simple app demo for VL\n        </Footer>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}