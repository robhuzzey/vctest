{"version":3,"sources":["Components/Beer.js","Components/Header.js","Components/Footer.js","Components/Search.js","Components/CardGrid.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","card","height","display","flexDirection","paddingTop","spacing","cardMedia","backgroundSize","cardContent","flexGrow","Beer","props","classes","Card","className","CardMedia","image","imageUrl","title","CardContent","Typography","gutterBottom","variant","component","name","firstBrewed","description","header","backgroundColor","Header","AppBar","position","Toolbar","color","noWrap","footer","palette","background","paper","padding","Footer","align","input","marginLeft","flex","iconButton","searchBar","paddingBottom","root","alignItems","Search","useState","searchTerm","setState","searchCallback","onSearch","bind","Container","maxWidth","Paper","InputBase","placeholder","inputProps","onChange","event","target","value","IconButton","aria-label","onClick","cardGrid","CardGrid","children","fetchBeers","a","cleanedSearchTerm","replace","fetch","then","data","json","result","App","state","beers","this","CssBaseline","Grid","container","map","beer","item","key","id","xs","sm","md","image_url","first_brewed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e0664e0.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    paddingTop: theme.spacing(1)\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n    backgroundSize: 'contain'\n  },\n  cardContent: {\n    flexGrow: 1\n  }\n}))\n\nconst Beer = (props) => {\n  const classes = useStyles()\n  return (\n    <Card className={classes.card}>\n      <CardMedia\n        className={classes.cardMedia}\n        image={props.imageUrl}\n        title='Image title'\n      />\n      <CardContent className={classes.cardContent}>\n        <Typography gutterBottom variant='h5' component='h2'>\n          {props.name}\n        </Typography>\n        <Typography>\n          First brewed: {props.firstBrewed}\n        </Typography>\n        <Typography>\n          {props.description}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default Beer\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  header: {\n    backgroundColor: '#dc143c'\n  }\n}))\n\nconst Header = () => {\n  const classes = useStyles()\n  return (\n    <>\n      <AppBar className={classes.header} position='relative'>\n        <Toolbar>\n          <Typography variant='h6' color='inherit' noWrap>\n            IPA Brewdog\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}))\n\nconst Footer = () => {\n  const classes = useStyles()\n  return (\n    <footer className={classes.footer}>\n      <Typography variant='h6' align='center' gutterBottom>\n        Footer\n      </Typography>\n      <Typography variant='subtitle1' align='center' color='textSecondary' component='p'>\n        Something here to give the footer a purpose!\n      </Typography>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputBase from '@material-ui/core/InputBase'\nimport SearchIcon from '@material-ui/icons/Search'\nimport Container from '@material-ui/core/Container'\nimport Paper from '@material-ui/core/Paper'\n\nconst useStyles = makeStyles(theme => ({\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  iconButton: {\n    padding: 10\n  },\n  searchBar: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(1)\n  },\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center'\n  }\n}))\n\nconst Search = (props) => {\n  const classes = useStyles()\n  const [searchTerm, setState] = useState('')\n  const searchCallback = props.onSearch.bind(this, searchTerm)\n  return (\n    <Container className={classes.searchBar} maxWidth='md'>\n      <Paper className={classes.root}>\n        <InputBase\n          className={classes.input}\n          placeholder='Enter your food here'\n          inputProps={{ 'aria-label': 'enter your food' }}\n          onChange={event => {\n            setState(event.target.value)\n          }}\n        />\n        <IconButton className={classes.iconButton} aria-label='search' onClick={searchCallback}>\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n    </Container>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  }\n}))\n\nconst CardGrid = (props) => {\n  const classes = useStyles()\n  return (\n    <Container className={classes.cardGrid} maxWidth='md'>\n      {props.children}\n    </Container>\n  )\n}\n\nexport default CardGrid\n","import React from 'react'\nimport './App.css'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Grid from '@material-ui/core/Grid'\nimport Beer from './Components/Beer'\nimport Header from './Components/Header'\nimport Footer from './Components/Footer'\nimport Search from './Components/Search'\nimport CardGrid from './Components/CardGrid'\n\nconst fetchBeers = async (searchTerm) => {\n  const cleanedSearchTerm = searchTerm.replace(' ', '_')\n  const result = await fetch(`https://api.punkapi.com/v2/beers?food=${cleanedSearchTerm}`)\n    .then(data => data.json())\n    .then(json => {\n      return json\n    })\n  return result\n}\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      beers: []\n    }\n  }\n\n  async fetchBeers (searchTerm) {\n    const beers = await fetchBeers(searchTerm)\n    this.setState(() => {\n      return {\n        beers\n      }\n    })\n  }\n\n  render () {\n    return (\n      <>\n        <CssBaseline />\n        <Header />\n        <main>\n          <Search\n            onSearch={searchTerm => {\n              this.fetchBeers(searchTerm)\n            }}\n          />\n          <CardGrid>\n            <Grid container spacing={4}>\n              {this.state.beers.map(beer => (\n                <Grid item key={beer.id} xs={12} sm={6} md={4}>\n                  <Beer\n                    name={beer.name}\n                    imageUrl={beer.image_url}\n                    description={beer.description}\n                    firstBrewed={beer.first_brewed}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </CardGrid>\n        </main>\n        <Footer />\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}